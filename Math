// gcd
int gcd(int a,int b) { if (a == 0) return b; return gcd(b%a, a);}

//lcm
int lcm(int a, int b){return (a / gcd(a, b)) * b;}

// ceil value
int ceilVal(int a,int b){return (a/b)+((a%b)!=0);}

// digit square sum
  int digitSqSum(int n){
      int sum = 0;
      while(n > 0){
          sum = sum + ((n%10)*(n%10));
          n=n/10;
      }
      return sum;
  }
  
// Sieve
    bool prime[500001];
    void SieveOfEratosthenes(){
      memset(prime, true, sizeof(prime));
      int n = 500000;
      for (int p = 2; p * p <= n; p++) {
          if (prime[p] == true) {
              for (int i = p * p; i <= n; i += p)
                  prime[i] = false;
          }
      }
    }
    
//   spf and using spf finding prime factors of a number 
    vector<int> spf; // spf[x] is the smallest prime factor of number x, where x >= 2
    void sieve(int n) { // O(Nlog(logN)) ~ O(N)
        spf.resize(n);
        for (int i = 2; i < n; ++i) spf[i] = i;
        for (int i = 2; i * i < n; i++) {
            if (spf[i] != i) continue; // skip if `i` is not a prime number
            for (int j = i * i; j < n; j += i)
                if (spf[j] > i) spf[j] = i; // update to the smallest prime factor of j
        }
    }
    vector<int> getPrimeFactors(int n) { // O(logN)
        vector<int> factors;
        while (n > 1) {
            factors.push_back(spf[n]);
            n /= spf[n];
        }
        return factors;
    }
    
//modular exponentiation    will find x^y under mod p
    int power(long long x, unsigned int y, int p){
        int res = 1; 
        x = x % p; 
        if (x == 0) return 0; 
        while (y > 0){
             if (y & 1)
                res = (res*x) % p;
            y = y>>1;
            x = (x*x) % p;
        }
        return res;
    }
    
// Number of Divisors
	const int N=1e6+1;
	vector<int>d(N,0);
	void seive(){
	    loop(i,1,N){
		for(int j=i;j<=N;j+=i){
		    d[j]++;
		}
	    }
	}

//   Compute nCr % p using Fermat Little Theorem -------------->
	static const int N = 1e5 + 5;
	
	unsigned long long power(unsigned long long x, int y, int p) {
		unsigned long long res = 1;
		
		x = x % p; 
		while (y > 0) {
		if (y & 1)
		res = (res * x) % p;
		y = y >> 1; 
		x = (x * x) % p;
		}
		return res;
	}
	
	// Returns n^(-1) mod p
	unsigned long long modInverse(unsigned long long n, int p) {
		return power(n, p - 2, p);
	}
	
	unsigned long long fac[N];
	void computeFac() {
		fac[0] = 1;
		for (int i = 1; i < N; i++)
		fac[i] = (fac[i - 1] * i) % 1000000007;
	}
	
	// Returns nCr % p using Fermat's little theorem.
	unsigned long long nCrModPFermat(unsigned long long n, int r, int p) {
		if (n < r)
		return 0;
		if (r == 0)
		return 1;
		
		return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p;
	}
	// don't forget to call computeFac();

    
// length of two intervals
  	int a, b, c, d;
	cin >> a >> b >> c >> d; // coordinates of two intervals
  	int total = (b - a) + (d - c);  // the sum of the two intervals
	int intersection = max(min(b, d) - max(a, c), 0);  // check if there is common interval
	int ans = total - intersection;
  
// Test whether there is any overlap of the two ranges?
	(StartA <= EndB) and (EndA >= StartB)
/*---------------------------------------RECTANGLES--------------------------------*/  

// Given 2 rectangles and a obstacle truck. Find the visibility region;
    struct Rect {
      int x1, y1, x2, y2;
      int area() { return (y2 - y1) * (x2 - x1); }
    };

    int intersect(Rect p, Rect q) {
      int xOverlap = max(0, min(p.x2, q.x2) - max(p.x1, q.x1));
      int yOverlap = max(0, min(p.y2, q.y2) - max(p.y1, q.y1));
      return xOverlap * yOverlap;
    }

    int main() {
      Rect a, b, t;  // billboards a, b, and the truck
      cin >> a.x1 >> a.y1 >> a.x2 >> a.y2;
      cin >> b.x1 >> b.y1 >> b.x2 >> b.y2;
      cin >> t.x1 >> t.y1 >> t.x2 >> t.y2;
      cout << a.area() + b.area() - intersect(a, t) - intersect(b, t) << endl;
    }

// Area of a rectangle
    int area(int bl_x, int bl_y, int tr_x, int tr_y) {
	int length = tr_y - bl_y;
	int width = tr_x - bl_x;
	return length * width;
    }
    
// Checking if two rectangles intersect
    bool intersect(vector<int> s1, vector<int> s2) {
	int bl_a_x = s1[0], bl_a_y = s1[1], tr_a_x = s1[2], tr_a_y = s1[3];
	int bl_b_x = s2[0], bl_b_y = s2[1], tr_b_x = s2[2], tr_b_y = s2[3];

	if (bl_a_x >= tr_b_x || tr_a_x <= bl_b_x || bl_a_y >= tr_b_y || tr_a_y <= bl_b_y) { // no overlap
		return false;
	} else {
		return true;
	}
    }
    
// Finding area of intersection
    int inter_area(vector<int> s1, vector<int> s2) {
	int bl_a_x = s1[0], bl_a_y = s1[1], tr_a_x = s1[2], tr_a_y = s1[3];
	int bl_b_x = s2[0], bl_b_y = s2[1], tr_b_x = s2[2], tr_b_y = s2[3];
	return ((min(tr_a_x, tr_b_x) - max(bl_a_x, bl_b_x)) * (min(tr_a_y, tr_b_y) - max(bl_a_y, bl_b_y)));
    }
    
    
