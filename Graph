// Vector of normal Edges into Adjacency
	vector<int>adj[n+1];
        vector<vector<int>>graph(n+1);
        for(auto &it : edges) {
            int u=it[0], v = it[1];
            graph[u].push_back(v);
            graph[v].push_back(u);
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

// Vector of weighted Edges into Adjacency
	vector< pair<int, int> > adj[n+1];
        for(auto &it : edges) {
            int u = it[0], v = it[1], wt = it[2];
            adj[u].push_back({v, wt});
            adj[v].push_back({u, wt});
        }

//shortest distance of all the vertices from the source vertex S.
    // adj size denotes vertices.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>> > pq;
        vector<int> dist(V, 1e9);
        dist[S] = 0;
        pq.push({0, S});
        while(!pq.empty()) {
            auto it = pq.top();
            pq.pop();
            int node = it.second;
            int wt = it.first;
            if(dist[node] < wt)continue; // tle w/o it
            for(auto vec : adj[node]) {
                if(dist[vec[0]] > dist[node] + vec[1]) {
                    dist[vec[0]] = dist[node] + vec[1];
                    pq.push({dist[node] + vec[1], vec[0]});
                }
            }
        }
        return dist;
    }


//Distance from the Source (Bellman-Ford Algorithm) ->
    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
        vector<int> dist(V, 1e8);
        dist[S] = 0;
        for(int i = 1; i <= V-1; i++) {
            for(auto &it : edges) {
                int u = it[0], v = it[1], wt = it[2];
                dist[v] = min(dist[v], dist[u] + wt);
            }
        }
        
        for(auto &it : edges) {  // check for cycle
            int u = it[0], v = it[1], wt = it[2];
            if(wt + dist[u] < dist[v]) return {-1};
        }
        
        return dist;
    }
    
// Floyd Warshall ->
  void shortest_distance(vector<vector<int>>&matrix){
	    // Code here
	    int n = matrix.size();
	    for(int i = 0; i < n; i++) {
	        for(int j = 0; j < n; j++) {
	            if(matrix[i][j] == -1)matrix[i][j] = 1e8;
	        }
	    }
	    
	    for(int via = 0; via < n; via++) {
	        
	        for(int i = 0; i < n; i++) {
	            for(int j = 0; j < n; j++) {
	                matrix[i][j] = min(matrix[i][j], matrix[i][via] + matrix[via][j]);
	            }
	        }
	        
	    }
	    
	    for(int i = 0; i < n; i++) {
	        for(int j = 0; j < n; j++) {
	            if(matrix[i][j] == 1e8)matrix[i][j] = -1;
	        }
	    }
	}
  
// Disjoint Set->

class DisjointSet {
    vector<int> rank, parent, size; 
public: 
    DisjointSet(int n) {  //constructor
        rank.resize(n+1, 0); 
        parent.resize(n+1);
        size.resize(n+1); 
        for(int i = 0;i<=n;i++) {
            parent[i] = i; 
            size[i] = 1; 
        }
    }

    int findUPar(int node) {  // ultimate parent
        if(node == parent[node])
            return node; 
        return parent[node] = findUPar(parent[node]); 
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u); 
        int ulp_v = findUPar(v); 
        if(ulp_u == ulp_v) return; 
        if(rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v; 
        }
        else if(rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u; 
        }
        else {
            parent[ulp_v] = ulp_u; 
            rank[ulp_u]++; 
        }
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u); 
        int ulp_v = findUPar(v); 
        if(ulp_u == ulp_v) return; 
        if(size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v; 
            size[ulp_v] += size[ulp_u]; 
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v]; 
        }
    }
}; 
int main() {
    DisjointSet ds(7);  // initialisation by size 7
    ds.unionBySize(1, 2); 
    ds.unionBySize(2, 3); 
    ds.unionBySize(4, 5); 
    ds.unionBySize(6, 7); 
    ds.unionBySize(5, 6); 
    // if 3 and 7 same or not 
    if(ds.findUPar(3) == ds.findUPar(7)) {
        cout << "Same\n"; 
    }
    else cout << "Not same\n"; 
 }
 
// DSU for CP->
class Disjoint{
    vector<int>parent, rank;
    public:
    Disjoint(int n) {
        parent.resize(n+1);
        rank.resize(n+1, 0);
        for(int i = 0; i <= n; i++)parent[i] = i;
    }
    
    int find(int node) {
        if(parent[node] == node) return node;
        return parent[node] = find(parent[node]);
    }
    
    void unionByRank(int u, int v) {
        int pu = find(u);
        int pv = find(v);
        if(pu == pv) return;
        if(rank[pu] < rank[pv]) {
            parent[pu] = pv;
        }else if(rank[pv] < rank[pu]){
            parent[pv] = pu;
        }else{
            parent[pv] = pu;
            rank[pu]++;
        }
    }
};

//   Checking Bipartiteness of a Graph
bool dfs(int node, int col, vector<int> &vis, vector<int>adj[]) {
    vis[node] = col;
    for(auto it : adj[node]) {
        if(vis[it] == -1){
            if(!dfs(it, !col, vis, adj))return false;
        }else if(vis[it] == col)return false;
    }
    return true;
}

void solve(){
    int n,m;cin>>n>>m;
    vector<int>adj[n+1];
    for(int i=0;i<m;i++){
        int a,b;cin>>a>>b;
        adj[a].pb(b);
        adj[b].pb(a);
    }
    vector<int>vis(n+1, -1);
    for(int i = 1; i <= n; i++) {
        if(vis[i] == -1){
            if(!dfs(i, 0, vis, adj)){
                cout<<"IMPOSSIBLE";    // Not a bipartite graph.
                return;
            }
        }
    }
    for(int i=1;i<=n;i++)cout<<vis[i]+1<<" ";  // nodes are in either G1 or G2;
}
  
