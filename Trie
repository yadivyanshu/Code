//Trie implementation for insertion, string search 

struct TrieNode{
    TrieNode *children[26];
    bool flag = false;
    
    bool containsKey(char ch){
        return (children[ch - 'a'] != NULL);
    }
    
    void put(char ch, TrieNode* node){
        children[ch - 'a'] = node;
    }
    
    TrieNode* get(char ch){
        return children[ch - 'a'];
    }
    
    void setEnd() {
		flag = true;
	}
    
	bool isEnd() {
		return flag;
	}
    
};


class Trie {
    TrieNode* root;
public:
    Trie() {
        root = new TrieNode();
    }
    
    void insert(string word) {
        TrieNode* curr = root;
        for(auto it : word){
            if(!curr->containsKey(it)) curr->put(it, new TrieNode());
            curr = curr->get(it);
        }
        curr->setEnd();
    }
    
    bool search(string word) {
        TrieNode* curr = root;
        for(auto it: word){
            if(!curr->containsKey(it)) return false;
            curr = curr->get(it);
        }
        return curr->isEnd();
    }
    
    bool startsWith(string prefix) {
        TrieNode* curr = root;
        for(auto it: prefix){
            if(!curr->containsKey(it)) return false;
            curr = curr->get(it);
        }
        return true;
    }
};

// Trie implementation for prefix starts, freq of string and delete

#include <bits/stdc++.h> 

struct Node{
    Node* child[26];
    int cntPrefix = 0;
    int cntEndWith = 0;

    bool containsKey(char ch){
        return (child[ch- 'a'] != NULL);
    }

    void put(char ch, Node* node){
        child[ch- 'a'] = node;
    }

    Node* get(char ch){
        return child[ch - 'a'];
    }

    void increasePrefix(){
        cntPrefix++;
    }

    void increaseEnd(){
        cntEndWith++;
    }

    void reducePrefix(){
        cntPrefix--;
    }

    void deleteEnd(){
        cntEndWith--;
    }

    int getEnd(){
        return cntEndWith;
    }

    int getPrefix(){
        return cntPrefix;
    }
};

class Trie{
Node* root;

    public:

    Trie(){
        root = new Node();
    }

    void insert(string &word){
        Node* curr = root;
        for(auto it: word){
            if(!curr->containsKey(it)) curr->put(it, new Node());
            curr = curr->get(it);
            curr->increasePrefix();
        }
        curr->increaseEnd();
    }

    int countWordsEqualTo(string &word){
        Node* curr = root;
        for(auto it: word){
            if(!curr->containsKey(it)) return 0;
            else curr = curr->get(it);
        }
        return curr->getEnd();
    }

    int countWordsStartingWith(string &word){
        Node* curr = root;
        for(auto it: word){
            if(!curr->containsKey(it)) return 0;
            else curr = curr->get(it);
        }
        return curr->getPrefix();
    }

    void erase(string &word){
        Node* curr = root;
        for(auto it: word){
            if(curr->containsKey(it)){
                curr = curr->get(it);
                curr->reducePrefix();
            }
            else return;
        }
        return curr->deleteEnd();
    }
};

//Bolier Plate code to stor digits and to sort them in lexicograpical order

struct Node{
    bool flag = false;
    Node* child[10];
    
    bool containsKey(char ch){
        return (child[ch - '0'] != NULL);
    }
    
    void put(char ch, Node* node){
        child[ch - '0'] = node;
    }
    
    Node* get(char ch){
        return child[ch - '0'];
    }
    
    void setEnd(){
        flag = true;
    }
    
    bool isEnd(){
        return flag;
    }
};

class Trie{
    public:
    
    Node* root;
    Trie(){
        root = new Node();   
    }
    
    void insert(const string &s){
        Node* curr = root;
        for(auto it: s){
            if(!curr->containsKey(it)) curr->put(it, new Node());
            curr = curr->get(it);
        }
        curr->setEnd();
    }

	
    //sort digits in lexicoghraphical orders
    void solve(string s, Node* curr, vector<int> &ans){
        if(curr->isEnd()) ans.push_back(stoi(s));
        
        for(int i = 0 ; i <= 9 ; i++){
            if(curr->containsKey(i + '0')){
                s += i + '0';
                solve(s, curr->get(i + '0'), ans);
                s.pop_back();
            }
        }
    }
};


//Boiler plate code for Trie with Bit Manipulation

struct Node{
    Node* child[2];
    int cnt[2];
    
    bool containsKey(int bit){
        return child[bit] != NULL;
    }
    
    void put(int bit, Node* node){
        child[bit] = node;
    }
    
    Node* get(int bit){
        return child[bit];
    }
};

class Trie{
  Node* root;
  public :
    Trie(){
        root = new Node();
    }
    
    void insert(int num){
        Node* curr = root;
        for(int i = 31 ; i >= 0 ; i--){
            int bit = (num >> i) & 1;
            if(!curr->containsKey(bit)) curr->put(bit, new Node());
            curr->cnt[bit]++;
            curr = curr->get(bit);
        }
    }
    
    void del(int num){
        Node* curr = root;
        for(int i = 31 ; i >= 0 ; i--){
            int bit = (num >> i) & 1;
            curr->cnt[bit]--;
            curr = curr->get(bit);
        }
    }
};
